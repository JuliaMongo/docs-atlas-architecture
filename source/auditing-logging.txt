.. _arch-center-auditing-logging:

====================
Auditing and Logging 
====================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: onecol

To monitor and log |service| platform activities, use auditing and logs.

{+service+} Features and Best Practices for Auditing and Logging
----------------------------------------------------------------

Auditing
~~~~~~~~

Database auditing lets administrators track system activity for 
deployments with multiple users. |service| administrators can select 
the actions, database users, |service| roles, and LDAP groups that they 
want to audit. You can configure manual :manual:`auditing </core/auditing>` 
in |service| of most of the documented :manual:`system event actions 
<audit-action-details-results>`.

You can :atlas:`set up database auditing <set-up-database-auditing>`.

To learn about best practices for auditing the actions of temporary
database users, see :atlas:`Audit Temporary Database Users <audit-temp-db-users>`.

By default, |service| performs database authentication auditing in M10+ clusters
to record authentication events, which include:

- database users
- source IP addresses
- timestamps for successful and failed attempts.

In addition, you can configure a JSON-formatted audit filter
to customize MongoDB auditing.
For a full list of events you can configure for auditing, and for a list
of examples, see :manual:`MongoDB auditing </core/auditing>`.

If you create a custom audit filter, you can skip using the managed 
{+atlas-ui+} auditing filter builder and configure your own tailored
granular control of event auditing.
Granular database auditing allows you to track usage of all DDL (Data Definition Language),
DML (Data Manipulation Language), and DCL (Data Control Language) commands
in detail.

Access audit logs through the Atlas UI or Atlas Admin API:

- :atlas:`atlas-auditing-describe <atlas-auditing-describe>` - Returns the
  auditing configuration for the specified project.
- :atlas:`atlas-auditing-update <atlas-auditing-update>` - Updates
  the auditing configuration for the specified project.

You can :atlas:`view authentication attempts <access-tracking>` that
are made against your cluster. Both successful and unsuccessful
attempts are logged, including the timestamp of the attempt and which
user tried to authenticate.

You can :atlas:`view and filter the activity feed <view-activity-feed>`
for an organization or project.

You can perform a full audit by using a combination of audit logs,
the ``mongodb.log``, and :atlas:`the project activity feed <view-activity-feed>`.

Logging
~~~~~~~

.. include:: /includes/cloud-docs/logs.rst

To retrieve the audit logs using the API, see
:oas-atlas-op:`Logs </downloadLogsForOneClusterHostInOneProject>`.

See also :atlas:`Atlas Deployment Logs <atlas-deployment-logs>`.

Examples
--------

The following examples show how to download logs using |service|
:ref:`tools for automation <arch-center-automation>`.

.. tabs::

   .. tab:: Dev and Test Environments
      :tabid: devtest

      .. include:: /includes/shared-settings-clusters-devtest.rst

   .. tab:: Staging and Prod Environments
      :tabid: stagingprod

      .. include:: /includes/shared-settings-clusters-stagingprod.rst


.. tabs::
   :hidden:

   .. tab:: Dev and Test Environments
      :tabid: devtest

      Download Logs
      ~~~~~~~~~~~~~

      Run the following CLI command to download a compressed file that contains the
      MongoDB logs for the specified host in your project.

      .. include:: /includes/examples/cli-example-download-logs.rst

   .. tab:: Staging and Prod Environments
      :tabid: stagingprod

      Download Logs
      ~~~~~~~~~~~~~

      Run the following command to download a compressed file that contains the
      MongoDB logs for the specified host in your project.

      .. include:: /includes/examples/cli-example-download-logs.rst
